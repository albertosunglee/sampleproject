name: UAT Delta Deployment (JWT + sfdx-git-delta)

on:
  push:
    branches: [UAT]
  workflow_dispatch:

env:
  SFDX_CLI_VERSION: latest
  NODE_VERSION: "20" # SGD v6 needs Node 20+ for the sf CLI runtime
  SF_LOGIN_URL: https://test.salesforce.com

jobs:
  delta-deployment:
    name: UAT Delta Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure full git history / remotes
        run: |
          git fetch --all --prune
          git branch -vv

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Install Salesforce CLI + sfdx-git-delta
        run: |
          npm install -g @salesforce/cli@${{ env.SFDX_CLI_VERSION }}
          sf --version
          # Pin via org-level variable SGD_VERSION if you like (e.g., v6.17.0)
          echo y | sf plugins install "sfdx-git-delta@${{ vars.SGD_VERSION || 'latest' }}"
          sf plugins

      - name: Authenticate to UAT (JWT)
        run: |
          echo "${{ secrets.SF_UAT_PRIVATE_KEY }}" > uat_private_key.key
          chmod 600 uat_private_key.key
          sf org login jwt \
            --client-id "${{ secrets.SF_UAT_CLIENT_ID }}" \
            --jwt-key-file uat_private_key.key \
            --username "${{ secrets.SF_UAT_USERNAME }}" \
            --instance-url "${{ env.SF_LOGIN_URL }}" \
            --alias uat-org
          rm uat_private_key.key
          sf org display --target-org uat-org

      - name: Compute FROM ref
        id: base
        shell: bash
        run: |
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            FROM_REF="${{ github.event.before }}"
          else
            # first push to UAT: diff against UAT
            git fetch origin UAT:origin/UAT || true
            FROM_REF="origin/UAT"
          fi
          echo "from_ref=$FROM_REF" >> "$GITHUB_OUTPUT"
          echo "Comparing FROM: $FROM_REF  TO: HEAD"

      - name: Generate delta (SGD)
        id: sgd
        run: |
          mkdir -p delta
          # Limit to force-app (faster) and generate source + manifests
          sf sgd source delta \
            --from "${{ steps.base.outputs.from_ref }}" \
            --to "HEAD" \
            --source-dir "force-app" \
            --output-dir "delta" \
            --generate-delta
          echo "Delta contents:"
          ls -R delta || true

      - name: Show manifests
        run: |
          echo "---- package.xml ----"
          cat delta/package/package.xml || true
          echo
          echo "---- destructiveChanges.xml ----"
          cat delta/destructiveChanges/destructiveChanges.xml || true

      - name: Lint changed JS (optional)
        run: |
          CHANGED_JS=$(find delta -type f -name "*.js" || true)
          if [ -n "$CHANGED_JS" ]; then
            npx eslint $CHANGED_JS
          else
            echo "No JS changes."
          fi

      - name: Deploy added/modified metadata to UAT
        id: deploy_pkg
        run: |
          if [ -f delta/package/package.xml ] && grep -q "<types>" delta/package/package.xml; then
            sf project deploy start \
              -x delta/package/package.xml \
              --target-org uat-org \
              --wait 60
            echo "did_pkg=true" >> "$GITHUB_OUTPUT"
          else
            echo "No package changes to deploy."
            echo "did_pkg=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run targeted Apex tests (if Apex classes changed)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          pip install yq  # provides `xq`
          TESTS=$(xq . < delta/package/package.xml | jq -r '
            .Package.types
            | (if type=="array" then . else [.] end)
            | map(select(.name=="ApexClass"))
            | .[].members
            | (if type=="array" then . else [.] end)
            | map(select(. | index("*") | not))
            | unique
            | join(",")
          ')
          if [ -n "$TESTS" ]; then
            echo "Running specified tests: $TESTS"
            sf apex run test \
              --target-org uat-org \
              --test-level RunSpecifiedTests \
              --tests "$TESTS" \
              --wait 60 \
              --result-format human
          else
            echo "No Apex class changes; running RunLocalTests."
            sf apex run test \
              --target-org uat-org \
              --test-level RunLocalTests \
              --wait 60 \
              --result-format human
          fi

      - name: Apply destructive changes (if any)
        run: |
          if [ -f delta/destructiveChanges/destructiveChanges.xml ] && grep -q "<types>" delta/destructiveChanges/destructiveChanges.xml; then
            # Use the minimal manifest generated alongside destructiveChanges
            sf project deploy start \
              --post-destructive-changes delta/destructiveChanges/destructiveChanges.xml \
              --manifest delta/destructiveChanges/package.xml \
              --target-org uat-org \
              --ignore-warnings \
              --wait 60
          else
            echo "No destructive changes to apply."
          fi
        # You can switch to --pre-destructive-changes if your process requires deletions first

      - name: Upload delta artifact
        uses: actions/upload-artifact@v4
        with:
          name: delta-${{ github.sha }}
          path: delta/
          retention-days: 30

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [delta-deployment]
    if: failure()
    steps:
      - run: |
          echo "‚ùå UAT deployment failed!"
          echo "üîó Branch: ${{ github.ref_name }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
