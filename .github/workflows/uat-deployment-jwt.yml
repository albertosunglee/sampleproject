name: UAT Delta Deployment (JWT Bearer Flow)

on:
  push:
    branches: [UAT]
  workflow_dispatch: # Allow manual triggering

env:
  SFDX_CLI_VERSION: latest
  NODE_VERSION: "18"

jobs:
  delta-deployment:
    name: UAT Delta Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch full history for git diff
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@${{ env.SFDX_CLI_VERSION }}
          sf version --verbose

      - name: Authenticate to UAT Org (JWT Bearer Flow)
        run: |
          # Create private key file from secret
          echo "${{ secrets.SF_UAT_PRIVATE_KEY }}" > uat_private_key.key

          # Authenticate using JWT Bearer Flow
          sf org login jwt \
            --client-id ${{ secrets.SF_UAT_CLIENT_ID }} \
            --jwt-key-file uat_private_key.key\
            --username ${{ secrets.SF_UAT_USERNAME }} \
            --alias uat-org

          # Clean up private key file
          rm uat_private_key.key

          # Verify authentication
          sf org display --target-org uat-org

      - name: Detect Delta Changes
        id: delta-changes
        run: |
          # Get the previous commit to compare against
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            # Regular push - compare with previous commit
            PREVIOUS_COMMIT="${{ github.event.before }}"
          else
            # First push to branch - compare with main branch
            git fetch origin main:main
            PREVIOUS_COMMIT="origin/main"
          fi

          echo "Comparing against: $PREVIOUS_COMMIT"

          # Get changed files in force-app directory
          CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT HEAD -- force-app/ | grep -E '\.(cls|trigger|page|component|email|layout|object|app|tab|permissionset|profile|flow|workflow|validationRule|customMetadata|customLabels|staticResource|lwc|aura)' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No Salesforce metadata files changed."
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo "has_changes=true" >> $GITHUB_OUTPUT

          # Create directory for delta package
          mkdir -p delta-package

          # Copy changed files to delta package directory
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              # Create directory structure
              mkdir -p "delta-package/$(dirname "$file")"
              cp "$file" "delta-package/$file"
              
              # Copy meta files if they exist
              if [ -f "${file}-meta.xml" ]; then
                cp "${file}-meta.xml" "delta-package/${file}-meta.xml"
              fi
            fi
          done

      - name: Generate Delta Package.xml
        if: steps.delta-changes.outputs.has_changes == 'true'
        run: |
          # Generate package.xml for delta changes
          sf project generate manifest --source-dir delta-package/force-app --name delta-package/package.xml

          echo "Generated package.xml:"
          cat delta-package/package.xml

      - name: Run Code Quality Checks on Delta
        if: steps.delta-changes.outputs.has_changes == 'true'
        run: |
          # Run ESLint only on changed JavaScript files
          CHANGED_JS_FILES=$(find delta-package -name "*.js" -type f || true)
          if [ -n "$CHANGED_JS_FILES" ]; then
            echo "Running ESLint on changed files..."
            npx eslint $CHANGED_JS_FILES
          else
            echo "No JavaScript files to lint."
          fi

      - name: Create Validation Scratch Org
        if: steps.delta-changes.outputs.has_changes == 'true'
        id: create-scratch-org
        run: |
          SCRATCH_ORG_ALIAS="uat-validation-$(date +%s)"
          sf org create scratch \
            --definition-file config/project-scratch-def.json \
            --alias $SCRATCH_ORG_ALIAS \
            --duration-days 1 \
            --set-default \
            --wait 10 \
            --target-dev-hub devhub
          echo "scratch_org_alias=$SCRATCH_ORG_ALIAS" >> $GITHUB_OUTPUT

      - name: Validate Delta Package in Scratch Org
        if: steps.delta-changes.outputs.has_changes == 'true'
        run: |
          echo "Validating delta package in scratch org..."
          sf project deploy start \
            --manifest delta-package/package.xml \
            --dry-run \
            --wait 10

          echo "Deploying delta package to scratch org for testing..."
          sf project deploy start \
            --manifest delta-package/package.xml \
            --wait 10

      - name: Run Apex Tests on Delta
        if: steps.delta-changes.outputs.has_changes == 'true'
        run: |
          # Check if there are any test classes in the delta
          TEST_CLASSES=$(find delta-package -name "*Test*.cls" -o -name "*_Test.cls" -o -name "Test*.cls" | sed 's/.*\///' | sed 's/\.cls$//' || true)

          if [ -n "$TEST_CLASSES" ]; then
            echo "Running specific test classes: $TEST_CLASSES"
            for test_class in $TEST_CLASSES; do
              sf apex run test \
                --class-names $test_class \
                --wait 10 \
                --result-format human
            done
          else
            echo "No test classes found in delta. Running all tests to ensure no regressions..."
            sf apex run test \
              --wait 10 \
              --result-format human \
              --code-coverage
          fi

      - name: Clean Up Validation Scratch Org
        if: always() && steps.create-scratch-org.outputs.scratch_org_alias
        run: sf org delete scratch --no-prompt --target-org ${{ steps.create-scratch-org.outputs.scratch_org_alias }}

      - name: Deploy Delta to UAT Org
        if: steps.delta-changes.outputs.has_changes == 'true'
        run: |
          echo "Deploying delta package to UAT org..."
          sf project deploy start \
            --manifest delta-package/package.xml \
            --target-org uat-org \
            --wait 30

      - name: Run Quick Tests in UAT
        if: steps.delta-changes.outputs.has_changes == 'true'
        run: |
          echo "Running quick validation tests in UAT org..."
          sf apex run test \
            --target-org uat-org \
            --wait 10 \
            --result-format human

      - name: Upload Delta Package Artifact
        if: steps.delta-changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: delta-package-${{ github.sha }}
          path: delta-package/
          retention-days: 30

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ steps.delta-changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ Delta deployment completed successfully!"
            echo "🔐 Authentication: JWT Bearer Flow (Secure)"
            echo "📦 Deployed package available as artifact: delta-package-${{ github.sha }}"
          else
            echo "ℹ️ No changes detected in Salesforce metadata. Deployment skipped."
          fi
          echo "🔗 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [delta-deployment]
    if: failure()

    steps:
      - name: Notify Failure
        run: |
          echo "❌ UAT deployment failed!"
          echo "🔗 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
          echo "Please check the workflow logs for details."
