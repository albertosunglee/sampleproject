name: UAT PR Check - Dry Run Validation

on:
  pull_request:
    branches: [UAT]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to validate (for manual runs)"
        required: true
        type: string

env:
  SFDX_CLI_VERSION: latest
  NODE_VERSION: "20"
  SF_LOGIN_URL: https://test.salesforce.com

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  pr-validation:
    name: UAT PR Validation (Dry Run)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # For workflow_dispatch, we need to checkout the PR branch
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/pull/{0}/head', inputs.pr_number) || github.head_ref }}

      - name: Get PR Information
        id: pr_info
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PR_NUMBER="${{ inputs.pr_number }}"
            echo "Manual validation for PR #$PR_NUMBER"
          else
            PR_NUMBER="${{ github.event.number }}"
            echo "Automatic validation for PR #$PR_NUMBER"
          fi
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          echo "üîç Validating PR #$PR_NUMBER targeting UAT branch"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Install Salesforce CLI + sfdx-git-delta
        run: |
          npm install -g @salesforce/cli@${{ env.SFDX_CLI_VERSION }}
          sf --version
          echo y | sf plugins install "sfdx-git-delta@${{ vars.SGD_VERSION || 'latest' }}"
          sf plugins

      - name: Authenticate to UAT (JWT) - Read Only for Validation
        run: |
          echo "${{ secrets.SF_UAT_PRIVATE_KEY }}" > uat_private_key.key
          chmod 600 uat_private_key.key
          sf org login jwt \
            --client-id "${{ secrets.SF_UAT_CLIENT_ID }}" \
            --jwt-key-file uat_private_key.key \
            --username "${{ secrets.SF_UAT_USERNAME }}" \
            --instance-url "${{ env.SF_LOGIN_URL }}" \
            --alias uat-org
          rm uat_private_key.key
          sf org display --target-org uat-org

      - name: Compute FROM ref for PR delta
        id: base
        run: |
          # For PRs, compare against the target branch (UAT)
          git fetch origin UAT:origin/UAT
          FROM_REF="origin/UAT"
          echo "from_ref=$FROM_REF" >> "$GITHUB_OUTPUT"
          echo "üîç Comparing FROM: $FROM_REF TO: HEAD for PR validation"

      - name: Generate delta package for PR validation
        id: sgd
        run: |
          mkdir -p delta
          sf sgd source delta \
            --from "${{ steps.base.outputs.from_ref }}" \
            --to "HEAD" \
            --source-dir "force-app" \
            --output-dir "delta" \
            --generate-delta

          echo "üì¶ Delta contents for PR validation:"
          ls -R delta || true

      - name: Show PR validation manifests
        run: |
          echo "---- PR Validation Package (package.xml) ----"
          cat delta/package/package.xml || echo "No package.xml generated"
          echo
          echo "---- Destructive Changes (destructiveChanges.xml) ----"
          cat delta/destructiveChanges/destructiveChanges.xml || echo "No destructive changes"

      - name: PR Delta-based Drift Detection
        id: drift_check
        run: |
          echo "üîç Checking for drift in PR metadata (validation only)..."

          mkdir -p drift-check/org-delta-metadata
          mkdir -p drift-check/repo-delta-metadata

          DRIFT_DETECTED=false
          DRIFT_DETAILS=""

          if [ -f delta/package/package.xml ] && grep -q "<types>" delta/package/package.xml; then
            echo "üì¶ Analyzing PR delta package for drift..."
            
            cp -r delta/ drift-check/repo-delta-metadata/ || true
            
            echo "üì• Retrieving PR delta metadata from UAT org for comparison..."
            sf project retrieve start \
              --manifest delta/package/package.xml \
              --target-org uat-org \
              --target-metadata-dir drift-check/org-delta-metadata \
              --wait 30 || true
            
            if [ -d "drift-check/org-delta-metadata" ] && [ -d "delta" ]; then
              if ! diff -r -q delta/ drift-check/org-delta-metadata/ > drift-check/drift-summary.txt 2>&1; then
                DRIFT_DETECTED=true
                DRIFT_DETAILS="‚ö†Ô∏è Drift detected in PR metadata. UAT org differs from PR changes."
                echo "$DRIFT_DETAILS"
                echo "üìã Drift summary:"
                cat drift-check/drift-summary.txt || true
              else
                echo "‚úÖ No drift detected - PR metadata matches UAT org"
                DRIFT_DETAILS="‚úÖ No drift detected - PR metadata aligns with UAT org"
              fi
            else
              echo "‚ö†Ô∏è Could not perform drift comparison"
              DRIFT_DETAILS="‚ö†Ô∏è Drift comparison could not be completed"
            fi
          else
            echo "‚ÑπÔ∏è No metadata changes in PR - skipping drift detection"
            DRIFT_DETAILS="‚ÑπÔ∏è No metadata changes detected in PR"
          fi

          echo "drift_detected=$DRIFT_DETECTED" >> "$GITHUB_OUTPUT"
          echo "drift_details=$DRIFT_DETAILS" >> "$GITHUB_OUTPUT"

      - name: Validate PR deployment package (DRY RUN)
        id: validate
        run: |
          VALIDATION_SUCCESS=true
          VALIDATION_DETAILS=""

          if [ -f delta/package/package.xml ] && grep -q "<types>" delta/package/package.xml; then
            echo "üß™ Starting DRY RUN validation for PR changes..."
            
            # Perform dry-run validation - this will NOT deploy anything
            if sf project deploy start \
                -x delta/package/package.xml \
                --target-org uat-org \
                --dry-run \
                --wait 60; then
              VALIDATION_DETAILS="‚úÖ PR validation successful - All metadata can be deployed safely"
              echo "‚úÖ PR DRY RUN VALIDATION PASSED"
            else
              VALIDATION_SUCCESS=false
              VALIDATION_DETAILS="‚ùå PR validation failed - Deployment issues detected"
              echo "‚ùå PR DRY RUN VALIDATION FAILED"
            fi
          else
            echo "‚ÑπÔ∏è No package changes to validate in PR"
            VALIDATION_DETAILS="‚ÑπÔ∏è No metadata changes to validate in PR"
          fi

          echo "validation_success=$VALIDATION_SUCCESS" >> "$GITHUB_OUTPUT"
          echo "validation_details=$VALIDATION_DETAILS" >> "$GITHUB_OUTPUT"

      - name: Run code quality checks on PR changes
        id: quality
        continue-on-error: true
        run: |
          echo "üîç Running code quality checks on PR changes..."
          QUALITY_STATUS="‚úÖ Code quality checks passed"

          # Run ESLint on changed LWC files
          if find delta -name "*.js" -path "*/lwc/*" | head -1 | read; then
            echo "Running ESLint on changed LWC files..."
            if ! npm run lint -- $(find delta -name "*.js" -path "*/lwc/*" | tr '\n' ' '); then
              QUALITY_STATUS="‚ö†Ô∏è ESLint issues found in LWC files"
            fi
          fi

          # Run Prettier check on changed files
          if find delta -name "*.js" -o -name "*.html" -o -name "*.css" -o -name "*.cls" | head -1 | read; then
            echo "Running Prettier check on changed files..."
            if ! npm run prettier:verify -- $(find delta \( -name "*.js" -o -name "*.html" -o -name "*.css" -o -name "*.cls" \) | tr '\n' ' '); then
              QUALITY_STATUS="‚ö†Ô∏è Code formatting issues found (run npm run prettier to fix)"
            fi
          fi

          echo "quality_status=$QUALITY_STATUS" >> "$GITHUB_OUTPUT"

      - name: Validate destructive changes (DRY RUN)
        id: validate_destructive
        if: always()
        run: |
          DESTRUCTIVE_STATUS="‚ÑπÔ∏è No destructive changes in PR"

          if [ -f delta/destructiveChanges/destructiveChanges.xml ] && grep -q "<types>" delta/destructiveChanges/destructiveChanges.xml; then
            echo "üß™ Validating destructive changes (DRY RUN)..."
            
            if sf project deploy start \
                --post-destructive-changes delta/destructiveChanges/destructiveChanges.xml \
                --manifest delta/destructiveChanges/package.xml \
                --target-org uat-org \
                --dry-run \
                --ignore-warnings \
                --wait 60; then
              DESTRUCTIVE_STATUS="‚úÖ Destructive changes validation passed"
            else
              DESTRUCTIVE_STATUS="‚ùå Destructive changes validation failed"
            fi
          fi

          echo "destructive_status=$DESTRUCTIVE_STATUS" >> "$GITHUB_OUTPUT"

      - name: Comment PR with validation results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};
            const validationSuccess = ${{ steps.validate.outputs.validation_success }};
            const validationDetails = `${{ steps.validate.outputs.validation_details }}`;
            const driftDetected = ${{ steps.drift_check.outputs.drift_detected }};
            const driftDetails = `${{ steps.drift_check.outputs.drift_details }}`;
            const qualityStatus = `${{ steps.quality.outputs.quality_status }}`;
            const destructiveStatus = `${{ steps.validate_destructive.outputs.destructive_status }}`;

            const overallStatus = validationSuccess ? '‚úÖ PASSED' : '‚ùå FAILED';
            const statusEmoji = validationSuccess ? '‚úÖ' : '‚ùå';

            const comment = `## ${statusEmoji} UAT PR Validation Results

            **Overall Status**: ${overallStatus}
            **Validation Type**: Dry Run (No Deployment)
            **Checked**: \`${{ github.head_ref }}\` ‚Üí \`UAT\`
            **Timestamp**: ${new Date().toLocaleString()}

            ---

            ### üì¶ Deployment Validation
            ${validationDetails}

            ### üîç Drift Detection
            ${driftDetails}

            ### üßπ Code Quality
            ${qualityStatus}

            ### üóëÔ∏è Destructive Changes
            ${destructiveStatus}

            ---

            ### üìã What happens next?
            ${validationSuccess ? 
              '- ‚úÖ **Ready to merge**: This PR passed all validation checks\n- üöÄ **Deployment**: Changes will be deployed to UAT when merged' : 
              '- ‚ùå **Fix required**: Please resolve the validation issues before merging\n- üîß **Action needed**: Check the workflow logs for specific error details'
            }

            ### üîó Useful Links
            - [View detailed logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [UAT Deployment Workflow](.github/workflows/uat-deployment-jwt.yml)
            ${driftDetected ? '- üìä Download drift analysis from workflow artifacts' : ''}

            ---

            *ü§ñ This comment was automatically generated by the UAT PR Check workflow*`;

            // Find existing comment to update instead of creating new ones
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('UAT PR Validation Results') && 
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('Updated existing PR comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
              console.log('Created new PR comment');
            }

      - name: Upload PR validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-validation-${{ steps.pr_info.outputs.pr_number }}-${{ github.sha }}
          path: |
            delta/
            drift-check/
          retention-days: 7

      - name: Set PR check status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const validationSuccess = ${{ steps.validate.outputs.validation_success }};
            const conclusion = validationSuccess ? 'success' : 'failure';
            const title = validationSuccess ? 'UAT Validation Passed' : 'UAT Validation Failed';
            const summary = validationSuccess ? 
              'All metadata changes validated successfully (dry run)' : 
              'Validation failed - check logs for details';

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'UAT PR Validation',
              head_sha: context.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: summary
              }
            });

  notify-on-failure:
    name: Notify on PR Validation Failure
    runs-on: ubuntu-latest
    needs: [pr-validation]
    if: failure()
    steps:
      - run: |
          echo "‚ùå UAT PR validation workflow failed!"
          echo "üîó PR: #${{ github.event.number || inputs.pr_number }}"
          echo "üìù Run ID: ${{ github.run_id }}"
          echo "üïí Time: $(date)"
          echo ""
          echo "üí° This indicates a workflow issue, not a validation failure."
          echo "Please check the workflow logs for technical errors."
